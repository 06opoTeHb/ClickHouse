#include <common/phdr_cache.h>
#include <common/getThreadId.h>
#include <Common/Stopwatch.h>
#include <Common/Exception.h>

#include <IO/ReadBufferFromFile.h>
#include <IO/WriteBufferFromFileDescriptor.h>
#include <IO/copyData.h>

#include <Poco/Environment.h>

#include <optional>
#include <string_view>

#include <signal.h>
#include <time.h>
#include <elf.h>
#include <link.h>
#include <sys/mman.h>

#include <gtest/gtest.h>


namespace DB
{

namespace ErrorCodes
{
    extern const int CANNOT_MANIPULATE_SIGSET;
    extern const int CANNOT_SET_SIGNAL_HANDLER;
    extern const int CANNOT_SET_TIMER_PERIOD;
    extern const int CANNOT_CREATE_TIMER;
    extern const int CANNOT_ALLOCATE_MEMORY;
}


/// This is dumped from production server running Linux-4.19.183-42.2mofed-x86_64-with-Ubuntu-16.04-xenial
/// xxd -p -c32 sandbox-vdso.elf | sed -r -e 's/../\\x\0/g' | sed -r -e 's/^.+$/"\0"/'
const char vdso_from_sandbox[8192] =
"\x7f\x45\x4c\x46\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x3e\x00\x01\x00\x00\x00\x80\x09\x00\x00\x00\x00\x00\x00"
"\x40\x00\x00\x00\x00\x00\x00\x00\x18\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x38\x00\x04\x00\x40\x00\x11\x00\x10\x00"
"\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x3b\x10\x00\x00\x00\x00\x00\x00\x3b\x10\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00"
"\x60\x03\x00\x00\x00\x00\x00\x00\x60\x03\x00\x00\x00\x00\x00\x00\x60\x03\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00"
"\x10\x01\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xb0\x07\x00\x00\x00\x00\x00\x00"
"\xb0\x07\x00\x00\x00\x00\x00\x00\xb0\x07\x00\x00\x00\x00\x00\x00\x54\x00\x00\x00\x00\x00\x00\x00\x54\x00\x00\x00\x00\x00\x00\x00"
"\x04\x00\x00\x00\x00\x00\x00\x00\x50\xe5\x74\x64\x04\x00\x00\x00\x04\x08\x00\x00\x00\x00\x00\x00\x04\x08\x00\x00\x00\x00\x00\x00"
"\x04\x08\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00"
"\x03\x00\x00\x00\x0b\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x08\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x09\x00\x00\x00"
"\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x81\x34\x30\x01\x46\x65\x00\x81\x02\x00\x00\x00\x06\x00\x00\x00"
"\x08\x00\x00\x00\x7e\x55\xdd\x71\x00\xca\x1b\xb0\x86\x4b\x85\xe6\x0d\x8e\x1e\x82\x94\x78\x9e\x7c\x19\xa3\x43\x6e\x8a\x2a\xc6\x26"
"\x26\xb0\x62\x65\x6d\x58\x87\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x03\x00\x08\x00\x70\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x22\x00\x0c\x00"
"\x40\x0a\x00\x00\x00\x00\x00\x00\x25\x03\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x12\x00\x0c\x00\x70\x0d\x00\x00\x00\x00\x00\x00"
"\xca\x01\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x22\x00\x0c\x00\x70\x0d\x00\x00\x00\x00\x00\x00\xca\x01\x00\x00\x00\x00\x00\x00"
"\x2a\x00\x00\x00\x12\x00\x0c\x00\x40\x0f\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x22\x00\x0c\x00"
"\x40\x0f\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x0c\x00\x40\x0a\x00\x00\x00\x00\x00\x00"
"\x25\x03\x00\x00\x00\x00\x00\x00\x54\x00\x00\x00\x11\x00\xf1\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x36\x00\x00\x00\x12\x00\x0c\x00\x60\x0f\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x3d\x00\x00\x00\x22\x00\x0c\x00"
"\x60\x0f\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x5f\x5f\x76\x64\x73\x6f\x5f\x63\x6c\x6f\x63\x6b\x5f\x67\x65"
"\x74\x74\x69\x6d\x65\x00\x5f\x5f\x76\x64\x73\x6f\x5f\x67\x65\x74\x74\x69\x6d\x65\x6f\x66\x64\x61\x79\x00\x5f\x5f\x76\x64\x73\x6f"
"\x5f\x74\x69\x6d\x65\x00\x5f\x5f\x76\x64\x73\x6f\x5f\x67\x65\x74\x63\x70\x75\x00\x6c\x69\x6e\x75\x78\x2d\x76\x64\x73\x6f\x2e\x73"
"\x6f\x2e\x31\x00\x4c\x49\x4e\x55\x58\x5f\x32\x2e\x36\x00\x00\x00\x00\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00"
"\x02\x00\x02\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\xa1\xbf\xee\x0d\x14\x00\x00\x00\x1c\x00\x00\x00\x44\x00\x00\x00"
"\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x01\x00\xf6\x75\xae\x03\x14\x00\x00\x00\x00\x00\x00\x00\x54\x00\x00\x00\x00\x00\x00\x00"
"\x0e\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x04\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\xf5\xfe\xff\x6f\x00\x00\x00\x00\x60\x01\x00\x00\x00\x00\x00\x00"
"\x05\x00\x00\x00\x00\x00\x00\x00\xb0\x02\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\xa8\x01\x00\x00\x00\x00\x00\x00"
"\x0a\x00\x00\x00\x00\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00"
"\xfc\xff\xff\x6f\x00\x00\x00\x00\x28\x03\x00\x00\x00\x00\x00\x00\xfd\xff\xff\x6f\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00"
"\xf0\xff\xff\x6f\x00\x00\x00\x00\x0e\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x4c\x69\x6e\x75"
"\x78\x00\x00\x00\xb7\x13\x04\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x4c\x69\x6e\x75\x78\x00\x00\x00\x00\x00\x00\x00"
"\x04\x00\x00\x00\x14\x00\x00\x00\x03\x00\x00\x00\x47\x4e\x55\x00\xf9\x51\x0d\x91\x7e\x93\x38\x08\x45\x52\x99\x5c\xee\x1e\x21\x6e"
"\x50\xe0\x9d\x26\x01\x1b\x03\x3b\x38\x00\x00\x00\x06\x00\x00\x00\x7c\x01\x00\x00\x54\x00\x00\x00\xac\x01\x00\x00\x7c\x00\x00\x00"
"\x3c\x02\x00\x00\xa4\x00\x00\x00\x6c\x05\x00\x00\xfc\x00\x00\x00\x3c\x07\x00\x00\x3c\x01\x00\x00\x5c\x07\x00\x00\x5c\x01\x00\x00"
"\x14\x00\x00\x00\x00\x00\x00\x00\x01\x7a\x52\x00\x01\x78\x10\x01\x1b\x0c\x07\x08\x90\x01\x00\x00\x24\x00\x00\x00\x1c\x00\x00\x00"
"\x20\x01\x00\x00\x23\x00\x00\x00\x00\x41\x0e\x10\x86\x02\x43\x0d\x06\x59\x0a\xc6\x0c\x07\x08\x41\x0b\x44\xc6\x0c\x07\x08\x00\x00"
"\x24\x00\x00\x00\x44\x00\x00\x00\x28\x01\x00\x00\x87\x00\x00\x00\x00\x41\x0e\x10\x86\x02\x49\x0d\x06\x02\x68\x0a\xc6\x0c\x07\x08"
"\x41\x0b\x53\xc6\x0c\x07\x08\x00\x54\x00\x00\x00\x6c\x00\x00\x00\x90\x01\x00\x00\x25\x03\x00\x00\x00\x45\x0c\x0a\x00\x4c\x10\x06"
"\x02\x76\x00\x47\x0f\x03\x76\x70\x06\x10\x0c\x02\x76\x78\x41\x10\x03\x02\x76\x68\x02\x53\x0a\xc3\x42\xca\x0c\x0a\x00\x42\xcc\x41"
"\xc6\x44\x0c\x07\x08\x41\x0b\x02\xcc\x0a\xc3\x42\xca\x0c\x0a\x00\x42\xcc\x41\xc6\x44\x0c\x07\x08\x41\x0b\x00\x00\x00\x00\x00\x00"
"\x3c\x00\x00\x00\xc4\x00\x00\x00\x68\x04\x00\x00\xca\x01\x00\x00\x00\x45\x0c\x0a\x00\x49\x10\x06\x02\x76\x00\x47\x0f\x03\x76\x70"
"\x06\x10\x0c\x02\x76\x78\x45\x10\x03\x02\x76\x68\x02\xde\x0a\xc3\x42\xca\x0c\x0a\x00\x42\xcc\x41\xc6\x44\x0c\x07\x08\x41\x0b\x00"
"\x1c\x00\x00\x00\x04\x01\x00\x00\xf8\x05\x00\x00\x15\x00\x00\x00\x00\x41\x0e\x10\x86\x02\x4d\x0d\x06\x46\xc6\x0c\x07\x08\x00\x00"
"\x1c\x00\x00\x00\x24\x01\x00\x00\xf8\x05\x00\x00\x2a\x00\x00\x00\x00\x41\x0e\x10\x86\x02\x48\x0d\x06\x60\xc6\x0c\x07\x08\x00\x00"
"\x55\x48\x89\xe5\x0f\xae\xe8\x0f\x31\x48\xc1\xe2\x20\x48\x09\xd0\x48\x8b\x15\xf1\xc6\xff\xff\x48\x39\xc2\x77\x02\x5d\xc3\x48\x89"
"\xd0\x5d\xc3\x0f\x1f\x00\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\x00\x55\x8b\x15\x49\xd6\xff\xff\x48\x89\xe5\x83\xe2\xfe\x41\x89\xd0"
"\xf6\x05\x56\xd6\xff\xff\x01\x74\x64\x0f\xae\xe8\x0f\x31\x48\xc1\xe2\x20\x0f\xbe\x0d\x43\xd6\xff\xff\x8b\x35\x39\xd6\xff\xff\x48"
"\x09\xc2\x48\x2b\x15\x1f\xd6\xff\xff\x48\x89\xd0\x48\xd3\xe0\x85\xc9\x78\x30\x89\xf2\x48\x8b\x0d\x14\xd6\xff\xff\x48\xf7\xe2\x48"
"\x0f\xac\xd0\x20\x8b\x15\xf6\xd5\xff\xff\x41\x39\xd0\x75\xab\x48\x01\xc8\x48\x39\x05\x6f\xc6\xff\xff\x48\x0f\x43\x05\x67\xc6\xff"
"\xff\x5d\xc3\xf7\xd9\x48\x89\xd0\x48\xd3\xe8\xeb\xc6\x31\xc0\xc7\x07\x00\x00\x00\x00\x5d\xc3\x66\x0f\x1f\x84\x00\x00\x00\x00\x00"
"\x4c\x8d\x54\x24\x08\x48\x83\xe4\xf0\x41\x89\xf9\x41\xff\x72\xf8\x55\x48\x89\xe5\x41\x54\x41\x52\x53\x48\x8d\x5d\xdc\x48\x83\xec"
"\x18\x83\xff\x01\x74\x7d\x0f\x8e\x20\x01\x00\x00\x83\xff\x05\x74\x47\x83\xff\x06\x0f\x85\xf9\x00\x00\x00\x8b\x05\x00\xc6\xff\xff"
"\xa8\x01\x0f\x85\x98\x02\x00\x00\x48\x8b\x15\x41\xc6\xff\xff\x48\x89\x16\x48\x8b\x15\x3f\xc6\xff\xff\x48\x89\x56\x08\x39\x05\xdd"
"\xc5\xff\xff\x75\xd5\x48\x83\xc4\x18\x31\xc0\x5b\x41\x5a\x41\x5c\x5d\x49\x8d\x62\xf8\xc3\xf3\x90\x8b\x05\xc2\xc5\xff\xff\xa8\x01"
"\x75\xf4\x48\x8b\x15\xf7\xc5\xff\xff\x48\x89\x16\x48\x8b\x15\xf5\xc5\xff\xff\x48\x89\x56\x08\x3b\x05\xa3\xc5\xff\xff\x74\xc6\xeb"
"\xd7\xf3\x90\x44\x8b\x15\x96\xc5\xff\xff\x41\xf6\xc2\x01\x75\xf1\x8b\x05\x8e\xc5\xff\xff\x89\x45\xdc\x48\x8b\x05\xb0\xc5\xff\xff"
"\x48\x89\x06\x8b\x15\x7b\xc5\xff\xff\x4c\x8b\x1d\xa8\xc5\xff\xff\x83\xfa\x01\x0f\x84\x33\x01\x00\x00\x83\xfa\x02\x0f\x84\xe2\x01"
"\x00\x00\x31\xc0\x83\xfa\x03\x0f\x84\x8b\x01\x00\x00\x8b\x0d\x69\xc5\xff\xff\x44\x39\x15\x46\xc5\xff\xff\x75\xa7\x4c\x01\xd8\x48"
"\xd3\xe8\x48\x3d\xff\xc9\x9a\x3b\x0f\x86\x28\x01\x00\x00\x31\xd2\x48\x2d\x00\xca\x9a\x3b\x83\xc2\x01\x48\x3d\xff\xc9\x9a\x3b\x77"
"\xef\x48\x01\x16\x48\x89\x46\x08\x8b\x45\xdc\x85\xc0\x0f\x85\x32\xff\xff\xff\x49\x63\xf9\xb8\xe4\x00\x00\x00\x0f\x05\x48\x83\xc4"
"\x18\x5b\x41\x5a\x41\x5c\x5d\x49\x8d\x62\xf8\xc3\x85\xff\x48\x8d\x5d\xdc\x75\xdf\x44\x8b\x15\xe5\xc4\xff\xff\x41\xf6\xc2\x01\x0f"
"\x85\x74\x01\x00\x00\x8b\x05\xd9\xc4\xff\xff\x89\x45\xdc\x48\x8b\x05\xf3\xc4\xff\xff\x48\x89\x06\x8b\x15\xc6\xc4\xff\xff\x4c\x8b"
"\x1d\xdb\xc4\xff\xff\x83\xfa\x01\x74\x5b\x83\xfa\x02\x0f\x84\x1c\x01\x00\x00\x31\xc0\x83\xfa\x03\x0f\x84\x9f\x00\x00\x00\x8b\x0d"
"\xb8\xc4\xff\xff\x44\x39\x15\x95\xc4\xff\xff\x75\xa7\x4c\x01\xd8\x48\xd3\xe8\x48\x3d\xff\xc9\x9a\x3b\x76\x7b\x31\xd2\x48\x2d\x00"
"\xca\x9a\x3b\x83\xc2\x01\x48\x3d\xff\xc9\x9a\x3b\x77\xef\x48\x01\x16\x48\x89\x46\x08\x8b\x45\xdc\x85\xc0\x0f\x84\x53\xff\xff\xff"
"\xe9\x80\xfe\xff\xff\x48\x89\x75\xd0\xe8\x52\xfd\xff\xff\x48\x8b\x75\xd0\x48\x2b\x05\x4f\xc4\xff\xff\x8b\x15\x59\xc4\xff\xff\x48"
"\x23\x05\x4a\xc4\xff\xff\x48\x0f\xaf\xc2\xeb\x92\x48\x89\x75\xd0\xe8\x2b\xfd\xff\xff\x48\x8b\x75\xd0\x48\x2b\x05\x28\xc4\xff\xff"
"\x8b\x15\x32\xc4\xff\xff\x48\x23\x05\x23\xc4\xff\xff\x48\x0f\xaf\xc2\xe9\xb7\xfe\xff\xff\x31\xd2\xe9\xe4\xfe\xff\xff\xeb\x21\x4c"
"\x8b\x25\x82\xe3\xff\xff\x4c\x8b\x05\x83\xe3\xff\xff\x0f\xae\xe8\x0f\x31\x8b\x3d\x68\xe3\xff\xff\x39\xf9\x0f\x84\x87\x00\x00\x00"
"\x8b\x0d\x5a\xe3\xff\xff\x85\xc9\x75\xd5\xc7\x45\xdc\x00\x00\x00\x00\x31\xc0\xe9\x7a\xff\xff\xff\xeb\x1d\x4c\x8b\x25\x47\xe3\xff"
"\xff\x4c\x8b\x05\x48\xe3\xff\xff\x0f\xae\xe8\x0f\x31\x8b\x3d\x2d\xe3\xff\xff\x39\xf9\x74\x6f\x8b\x0d\x23\xe3\xff\xff\x85\xc9\x75"
"\xd9\xc7\x45\xdc\x00\x00\x00\x00\x31\xc0\xe9\x6a\xff\xff\xff\x48\x89\x75\xd0\x48\x89\xdf\xe8\xb5\xfc\xff\xff\x48\x8b\x75\xd0\xe9"
"\x2e\xff\xff\xff\x48\x89\x75\xd0\x48\x89\xdf\xe8\xa0\xfc\xff\xff\x48\x8b\x75\xd0\xe9\x40\xff\xff\xff\xf3\x90\xe9\x74\xfe\xff\xff"
"\xf3\x90\xe9\x53\xfd\xff\xff\x48\xc1\xe2\x20\x48\x09\xd0\x49\xf7\xe4\x48\x89\xd0\x4c\x01\xc0\x48\x83\xf8\xff\x0f\x85\xf1\xfe\xff"
"\xff\xe9\x64\xff\xff\xff\x48\xc1\xe2\x20\x48\x09\xd0\x49\xf7\xe4\x48\x89\xd0\x4c\x01\xc0\x48\x83\xf8\xff\x0f\x85\xf9\xfe\xff\xff"
"\xe9\x7c\xff\xff\xff\x90\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\x00\x4c\x8d\x54\x24\x08\x48\x83\xe4\xf0\x41\xff\x72\xf8\x55\x48\x89"
"\xe5\x41\x54\x41\x52\x53\x48\x83\xec\x18\x48\x85\xff\x0f\x84\xc5\x00\x00\x00\x48\x8d\x5d\xdc\x49\x89\xf9\x44\x8b\x15\xdf\xc2\xff"
"\xff\x41\xf6\xc2\x01\x0f\x85\x3d\x01\x00\x00\x8b\x05\xd3\xc2\xff\xff\x89\x45\xdc\x48\x8b\x05\xed\xc2\xff\xff\x49\x89\x01\x8b\x15"
"\xc0\xc2\xff\xff\x4c\x8b\x1d\xd5\xc2\xff\xff\x83\xfa\x01\x0f\x84\xf3\x00\x00\x00\x83\xfa\x02\x0f\x84\xf9\x00\x00\x00\x31\xc0\x83"
"\xfa\x03\x0f\x84\x8a\x00\x00\x00\x8b\x0d\xae\xc2\xff\xff\x44\x39\x15\x8b\xc2\xff\xff\x75\xa3\x4c\x01\xd8\x48\xd3\xe8\x48\x3d\xff"
"\xc9\x9a\x3b\x48\x89\xc1\x0f\x86\x08\x01\x00\x00\x31\xd2\x48\x89\xc8\x83\xc2\x01\x48\x8d\x88\x00\x36\x65\xc4\x48\x81\xf9\xff\xc9"
"\x9a\x3b\x77\xea\x8b\x45\xdc\x49\x01\x11\x49\x89\x49\x08\x85\xc0\x0f\x84\xcf\x00\x00\x00\x48\x89\xc8\x48\xba\xcf\xf7\x53\xe3\xa5"
"\x9b\xc4\x20\x48\xf7\xea\x48\x89\xc8\x48\xc1\xf8\x3f\x48\xc1\xfa\x07\x48\x29\xc2\x49\x89\x51\x08\x31\xc0\x48\x85\xf6\x0f\x85\x8c"
"\x00\x00\x00\x48\x83\xc4\x18\x5b\x41\x5a\x41\x5c\x5d\x49\x8d\x62\xf8\xc3\xeb\x23\x4c\x8b\x25\x8d\xe1\xff\xff\x48\x8b\x0d\x8e\xe1"
"\xff\xff\x0f\xae\xe8\x0f\x31\x44\x8b\x05\x72\xe1\xff\xff\x44\x39\xc7\x0f\x84\x84\x00\x00\x00\x8b\x3d\x63\xe1\xff\xff\x85\xff\x75"
"\xd3\xc7\x45\xdc\x00\x00\x00\x00\x31\xc0\x48\x2b\x05\xd7\xc1\xff\xff\x8b\x15\xe1\xc1\xff\xff\x48\x23\x05\xd2\xc1\xff\xff\x48\x0f"
"\xaf\xc2\xe9\x21\xff\xff\xff\x48\x89\x75\xd0\xe8\xb0\xfa\xff\xff\x48\x8b\x75\xd0\xeb\xd4\x48\x89\x75\xd0\x48\x89\xdf\xe8\xce\xfa"
"\xff\xff\x48\x8b\x75\xd0\xeb\xc2\xf3\x90\xe9\xab\xfe\xff\xff\x8b\x15\xeb\xc1\xff\xff\x89\x16\x8b\x15\xe7\xc1\xff\xff\x89\x56\x04"
"\xe9\x5e\xff\xff\xff\xb8\x60\x00\x00\x00\x4c\x89\xcf\x0f\x05\xe9\x4f\xff\xff\xff\x31\xd2\xe9\x09\xff\xff\xff\x48\xc1\xe2\x20\x48"
"\x09\xd0\x49\xf7\xe4\x48\x89\xd0\x48\x01\xc8\x48\x83\xf8\xff\x0f\x85\x75\xff\xff\xff\xe9\x67\xff\xff\xff\x66\x0f\x1f\x44\x00\x00"
"\x55\x48\x85\xff\x48\x8b\x05\x5d\xc1\xff\xff\x48\x89\xe5\x74\x03\x48\x89\x07\x5d\xc3\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x55\xb8\x7b\x00\x00\x00\x48\x89\xe5\x0f\x03\xc0\x90\x48\x85\xff\x74\x0a\x89\xc2\x81\xe2\xff\x0f\x00\x00\x89\x17\x48\x85\xf6\x74"
"\x05\xc1\xe8\x0c\x89\x06\x31\xc0\x5d\xc3\xfa\xf9\xff\xff\x8b\x00\x00\x00\x71\x00\x03\x03\x03\xed\xf9\xff\xff\x81\x00\x00\x00\x72"
"\x00\x03\x03\x03\x25\xfa\xff\xff\x77\x00\x00\x00\x71\x00\x03\x03\x03\x18\xfa\xff\xff\x6d\x00\x00\x00\x72\x00\x03\x03\x03\xcf\xfc"
"\xff\xff\x63\x00\x00\x00\x71\x00\x03\x03\x03\xc2\xfc\xff\xff\x59\x00\x00\x00\x72\x00\x03\x03\x03\xf0\xfc\xff\xff\x4f\x00\x00\x00"
"\x71\x00\x03\x03\x03\xe3\xfc\xff\xff\x45\x00\x00\x00\x72\x00\x03\x03\x03\x90\xfe\xff\xff\x3b\x00\x00\x00\x71\x00\x03\x03\x03\x83"
"\xfe\xff\xff\x31\x00\x00\x00\x72\x00\x03\x03\x03\x5d\xff\xff\xff\x27\x00\x00\x00\x16\x02\x04\x04\x01\x0f\xae\xf0\x0f\xae\xe8\x0f"
"\xae\xf0\x0f\xae\xe8\x0f\xae\xf0\x0f\xae\xe8\x0f\xae\xf0\x0f\xae\xe8\x0f\xae\xf0\x0f\xae\xe8\xf3\x0f\xc7\xf8\x47\x43\x43\x3a\x20"
"\x28\x55\x62\x75\x6e\x74\x75\x20\x35\x2e\x34\x2e\x30\x2d\x36\x75\x62\x75\x6e\x74\x75\x31\x7e\x31\x36\x2e\x30\x34\x2e\x31\x32\x29"
"\x20\x35\x2e\x34\x2e\x30\x20\x32\x30\x31\x36\x30\x36\x30\x39\x00\x00\x2e\x73\x68\x73\x74\x72\x74\x61\x62\x00\x2e\x67\x6e\x75\x2e"
"\x68\x61\x73\x68\x00\x2e\x64\x79\x6e\x73\x79\x6d\x00\x2e\x64\x79\x6e\x73\x74\x72\x00\x2e\x67\x6e\x75\x2e\x76\x65\x72\x73\x69\x6f"
"\x6e\x00\x2e\x67\x6e\x75\x2e\x76\x65\x72\x73\x69\x6f\x6e\x5f\x64\x00\x2e\x64\x79\x6e\x61\x6d\x69\x63\x00\x2e\x72\x6f\x64\x61\x74"
"\x61\x00\x2e\x6e\x6f\x74\x65\x00\x2e\x65\x68\x5f\x66\x72\x61\x6d\x65\x5f\x68\x64\x72\x00\x2e\x65\x68\x5f\x66\x72\x61\x6d\x65\x00"
"\x2e\x74\x65\x78\x74\x00\x2e\x61\x6c\x74\x69\x6e\x73\x74\x72\x75\x63\x74\x69\x6f\x6e\x73\x00\x2e\x61\x6c\x74\x69\x6e\x73\x74\x72"
"\x5f\x72\x65\x70\x6c\x61\x63\x65\x6d\x65\x6e\x74\x00\x2e\x63\x6f\x6d\x6d\x65\x6e\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x05\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00"
"\x03\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xf6\xff\xff\x6f"
"\x02\x00\x00\x00\x00\x00\x00\x00\x60\x01\x00\x00\x00\x00\x00\x00\x60\x01\x00\x00\x00\x00\x00\x00\x48\x00\x00\x00\x00\x00\x00\x00"
"\x03\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x0b\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\xa8\x01\x00\x00\x00\x00\x00\x00\xa8\x01\x00\x00\x00\x00\x00\x00\x08\x01\x00\x00\x00\x00\x00\x00"
"\x04\x00\x00\x00\x02\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x03\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\xb0\x02\x00\x00\x00\x00\x00\x00\xb0\x02\x00\x00\x00\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x00\x00\x00\xff\xff\xff\x6f"
"\x02\x00\x00\x00\x00\x00\x00\x00\x0e\x03\x00\x00\x00\x00\x00\x00\x0e\x03\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00"
"\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\xfd\xff\xff\x6f"
"\x02\x00\x00\x00\x00\x00\x00\x00\x28\x03\x00\x00\x00\x00\x00\x00\x28\x03\x00\x00\x00\x00\x00\x00\x38\x00\x00\x00\x00\x00\x00\x00"
"\x04\x00\x00\x00\x02\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x00\x00\x06\x00\x00\x00"
"\x03\x00\x00\x00\x00\x00\x00\x00\x60\x03\x00\x00\x00\x00\x00\x00\x60\x03\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00"
"\x04\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x01\x00\x00\x00"
"\x03\x00\x00\x00\x00\x00\x00\x00\x70\x04\x00\x00\x00\x00\x00\x00\x70\x04\x00\x00\x00\x00\x00\x00\x40\x03\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x52\x00\x00\x00\x07\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\xb0\x07\x00\x00\x00\x00\x00\x00\xb0\x07\x00\x00\x00\x00\x00\x00\x54\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x58\x00\x00\x00\x01\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\x04\x08\x00\x00\x00\x00\x00\x00\x04\x08\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x00\x00\x01\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\x40\x08\x00\x00\x00\x00\x00\x00\x40\x08\x00\x00\x00\x00\x00\x00\x40\x01\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x00\x00\x00\x01\x00\x00\x00"
"\x06\x00\x00\x00\x00\x00\x00\x00\x80\x09\x00\x00\x00\x00\x00\x00\x80\x09\x00\x00\x00\x00\x00\x00\x0a\x06\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x76\x00\x00\x00\x01\x00\x00\x00"
"\x02\x00\x00\x00\x00\x00\x00\x00\x8a\x0f\x00\x00\x00\x00\x00\x00\x8a\x0f\x00\x00\x00\x00\x00\x00\x8f\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x87\x00\x00\x00\x01\x00\x00\x00"
"\x06\x00\x00\x00\x00\x00\x00\x00\x19\x10\x00\x00\x00\x00\x00\x00\x19\x10\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9d\x00\x00\x00\x01\x00\x00\x00"
"\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x10\x00\x00\x00\x00\x00\x00\x35\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x10\x00\x00\x00\x00\x00\x00\xa6\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
;


/// Auxiliary values are the values provided by Linux kernel that are needed for program
/// to run and to introspect something about itself and the system.
/// It can be imagined as a special hidden part of program arguments.

/// The typical contents of auxv can be introspected as following:
/// LD_SHOW_AUXV=1 /usr/bin/true

/// The description is at 'man getauxval'.

size_t getAuxiliaryValue(size_t type)
{
    /// The table with auxiliary values (also known as 'auxv')
    /// is placed by Linux kernel (or, subsequently, by dynamic loader) after 'envp' on program load.

    size_t environ_size = 0;
    while (__environ[environ_size])
        ++environ_size;

    const size_t * auxv = reinterpret_cast<const size_t *>(__environ + environ_size + 1);

    for (size_t i = 0; auxv[i]; i += 2)
        if (auxv[i] == type)
            return auxv[i + 1];

    return {};
}


template <typename Res, typename Src>
static const Res * shift(const Src * ptr, size_t bytes)
{
    return reinterpret_cast<const Res *>(reinterpret_cast<const char *>(ptr) + bytes);
}


const char * mapVDSOFromSandbox()
{
    size_t vvar_offset = 4096 * 3;
    size_t vvar_size = 4096;
    size_t new_vdso_size = 8192;

    const char * original_vdso_addr = reinterpret_cast<const char *>(getAuxiliaryValue(AT_SYSINFO_EHDR));
    const char * original_vvar_addr = original_vdso_addr - vvar_offset;

    std::cerr << static_cast<const void *>(original_vdso_addr) << ", " << static_cast<const void *>(original_vvar_addr) << "\n";

    void * buf = reinterpret_cast<char *>(
        mmap(nullptr, vvar_offset + new_vdso_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0));

    if (MAP_FAILED == buf)
        throwFromErrno("Cannot mmap", ErrorCodes::CANNOT_ALLOCATE_MEMORY);

    char * new_vdso_addr = reinterpret_cast<char *>(buf) + vvar_offset;
    char * new_vvar_addr = reinterpret_cast<char *>(buf);

    std::cerr << static_cast<const void *>(new_vdso_addr) << ", " << static_cast<const void *>(new_vvar_addr) << "\n";

    for (size_t i = 0; i < vvar_size; ++i)
        std::cerr << static_cast<int>(original_vvar_addr[i]) << ", ";
    std::cerr << '\n';

    memcpy(new_vvar_addr, original_vvar_addr, vvar_size);
    memcpy(new_vdso_addr, vdso_from_sandbox, new_vdso_size);

    mprotect(new_vvar_addr, vvar_size, PROT_READ);
    mprotect(new_vdso_addr, new_vdso_size, PROT_READ | PROT_EXEC);

    dl_phdr_info info{};

    using Ehdr = Elf64_Ehdr;
    using Phdr = Elf64_Phdr;

    const Ehdr * elf_header = reinterpret_cast<const Ehdr *>(new_vdso_addr);

    info.dlpi_name = "[vdso]";
    info.dlpi_addr = reinterpret_cast<Elf64_Addr>(new_vdso_addr);
    info.dlpi_phnum = elf_header->e_phnum;
    info.dlpi_phdr = shift<Phdr>(elf_header, elf_header->e_phoff);

    pushPHDRCache(&info);

    return new_vdso_addr;
}


/// Virtual dynamic shared object, also known as 'vdso'.
/// It is a small dynamic library that is provided by Linux kernel to every program
/// (along with a separate data page that is also mapped by Linux kernel at program startup)
/// and contains helpers to implement some functions (notably 'clock_gettime' and 'getcpu') avoiding system calls.

/// The description is at 'man vdso'
/// You can dump this library as a file with https://github.com/mattkeenan/dump-vdso/blob/master/dump-vdso
/// And introspect as following:
/// readelf -a vdso.elf
/// readelf --debug-dump=frames vdso.elf

/// The source code of vdso is located here:
/// https://github.com/torvalds/linux/blob/master/arch/x86/entry/vdso/vclock_gettime.c
/// https://github.com/torvalds/linux/blob/master/arch/x86/include/asm/vdso/gettimeofday.h
/// https://github.com/torvalds/linux/blob/5bfc75d92efd494db37f5c4c173d3639d4772966/include/vdso/datapage.h

void * getSymbolFromVirtualDynamicSharedObject(const char * version_name, const char * symbol_name)
{
    using Ehdr = Elf64_Ehdr;
    using Phdr = Elf64_Phdr;
    using Sym = Elf64_Sym;
    using Verdef = Elf64_Verdef;
    using Verdaux = Elf64_Verdaux;

    /// One of the auxv contains pointer to ELF header of the 'vdso' library loaded into memory.
    /// It allows us to locate "program headers" and iterate over them
    /// And then we are iterating over every symbol in the library
    /// looking for our needed symbol.

    //const Ehdr * elf_header = reinterpret_cast<const Ehdr *>(getAuxiliaryValue(AT_SYSINFO_EHDR));
    const Ehdr * elf_header = reinterpret_cast<const Ehdr *>(mapVDSOFromSandbox());
    if (!elf_header)
        return nullptr;

    const Phdr * program_headers = shift<Phdr>(elf_header, elf_header->e_phoff);

    //std::cerr << program_headers << "\n";

    /// At what address the library is loaded.
    std::optional<size_t> base;

    /// Description of the dynamic library.
    const size_t * dynv = nullptr;

    for (size_t program_header_idx = 0; program_header_idx < elf_header->e_phnum; ++program_header_idx)
    {
        const Phdr * program_header = shift<Phdr>(program_headers, program_header_idx * elf_header->e_phentsize);

        if (program_header->p_type == PT_LOAD)
            base = reinterpret_cast<size_t>(elf_header) + program_header->p_offset - program_header->p_vaddr;
        else if (program_header->p_type == PT_DYNAMIC)
            dynv = shift<size_t>(elf_header, program_header->p_offset);
    }

    if (!dynv || !base)
        return nullptr;

    //std::cerr << *base << ", " << dynv << "\n";

    const char * strings = nullptr;
    const Sym * syms = nullptr;
    const Elf_Symndx * hash_table = nullptr;
    const uint16_t * versym = nullptr;
    const Verdef * verdef = nullptr;

    for (size_t i = 0; dynv[i]; i += 2)
    {
        const void * value_ptr = reinterpret_cast<void *>(*base + dynv[i + 1]);

        switch (dynv[i])
        {
            case DT_STRTAB: strings = reinterpret_cast<const char *>(value_ptr); break;
            case DT_SYMTAB: syms = reinterpret_cast<const Sym *>(value_ptr); break;
            case DT_HASH: hash_table = reinterpret_cast<const Elf_Symndx *>(value_ptr); break;
            case DT_VERSYM: versym = reinterpret_cast<const uint16_t *>(value_ptr); break;
            case DT_VERDEF: verdef = reinterpret_cast<const Verdef *>(value_ptr); break;
        }
    }

    if (!strings || !syms || !hash_table)
        return nullptr;

    if (!verdef)
        versym = nullptr;

    //std::cerr << "!\n";

    /// Despite the fact that we are looking into hashtable,
    /// we just iterate over it instead of doing hash lookup - for simplicity.

    for (size_t i = 0; i < hash_table[1]; ++i)
    {
        uint8_t symbol_type = syms[i].st_info % 16;
        uint8_t symbol_binding = syms[i].st_info / 16;

        if (symbol_type != STT_NOTYPE && symbol_type != STT_OBJECT && symbol_type != STT_FUNC && symbol_type != STT_COMMON)
            continue;

        if (symbol_binding != STB_GLOBAL && symbol_binding != STB_WEAK && symbol_binding != STB_GNU_UNIQUE)
            continue;

        if (!syms[i].st_shndx)
            continue;

        //std::cerr << (strings + syms[i].st_name) << "\n";

        if (std::string_view(symbol_name) != std::string_view(strings + syms[i].st_name))
            continue;

        //std::cerr << "!!\n";

        if (versym)
        {
            bool found = false;
            while (true)
            {
                //std::cerr << ".";

                if (!(verdef->vd_flags & VER_FLG_BASE) && (verdef->vd_ndx & 0x7FFF) == (versym[i] & 0x7FFF))
                {
                    found = true;
                    break;
                }
                if (verdef->vd_next == 0)
                {
                    break;
                }
                verdef = shift<Verdef>(verdef, verdef->vd_next);
            }

            if (!found)
                continue;

            const Verdaux * version_aux = shift<Verdaux>(verdef, verdef->vd_aux);

            //std::cerr << "'" << (strings + version_aux->vda_name) << "'" << "\n";

            if (std::string_view(version_name) != std::string_view(strings + version_aux->vda_name))
                continue;
        }

        //std::cerr << "!!!\n";

        return reinterpret_cast<void *>(*base + syms[i].st_value);
    }

    return 0;
}


using ClockGetTime = int (clockid_t, timespec *);
ClockGetTime * clock_gettime_from_vdso = nullptr;

static void initializeClockGettime()
{
    clock_gettime_from_vdso = reinterpret_cast<ClockGetTime *>(
        getSymbolFromVirtualDynamicSharedObject("LINUX_2.6", "__vdso_clock_gettime"));
}

static uint64_t nanoseconds()
{
    struct timespec ts;
    clock_gettime_from_vdso(CLOCK_MONOTONIC, &ts);
    return ts.tv_sec * 1000000000LL + ts.tv_nsec;
}


std::atomic<size_t> counter{};

static void signalHandler(int /*sig*/, siginfo_t * /*info*/, void * /*context*/)
{
    //(void)write(2, ".", 1);
    //std::cerr << StackTrace().toString() << "\n";
    StackTrace();
    ++counter; // += StackTrace().getSize();
}

/// A loop with clock_gettime.
/// A signal by timer will be received 1000 times a second.
/// Inside the signal handler we will unwind the stack.
/// And we will check if asynchronoud unwinding works well within 'clock_gettime'.
/// It may not be the case if 'vdso' has invalid 'unwind tables'.
/// Note that 'vdso' is mapped by Linux kernel (and depend on kernel version).
void loop(double seconds)
{
    updatePHDRCache();
    initializeClockGettime();

    static constexpr auto TIMER_PRECISION = 1000000000;
    static constexpr auto period = 100000;   /// 10 000 times a second.
    static constexpr auto pause_signal = SIGUSR1;

    timer_t timer_id = nullptr;

    struct sigaction sa{};
    sa.sa_sigaction = signalHandler;
    sa.sa_flags = SA_SIGINFO | SA_RESTART;

    if (sigemptyset(&sa.sa_mask))
        throwFromErrno("Failed to clean signal mask for query profiler", ErrorCodes::CANNOT_MANIPULATE_SIGSET);

    if (sigaddset(&sa.sa_mask, pause_signal))
        throwFromErrno("Failed to add signal to mask for query profiler", ErrorCodes::CANNOT_MANIPULATE_SIGSET);

    if (sigaction(pause_signal, &sa, nullptr))
        throwFromErrno("Failed to setup signal handler for query profiler", ErrorCodes::CANNOT_SET_SIGNAL_HANDLER);

    struct sigevent sev {};
    sev.sigev_notify = SIGEV_THREAD_ID;
    sev.sigev_signo = pause_signal;

    sev._sigev_un._tid = getThreadId();

    if (timer_create(CLOCK_MONOTONIC, &sev, &timer_id))
        throwFromErrno("Failed to create thread timer", ErrorCodes::CANNOT_CREATE_TIMER);

    struct timespec interval{.tv_sec = period / TIMER_PRECISION, .tv_nsec = period % TIMER_PRECISION};
    struct timespec offset{.tv_sec = 0, .tv_nsec = 1};

    struct itimerspec timer_spec = {.it_interval = interval, .it_value = offset};
    if (timer_settime(timer_id, 0, &timer_spec, nullptr))
        throwFromErrno("Failed to set thread timer period", ErrorCodes::CANNOT_SET_TIMER_PERIOD);

    uint64_t prev_time = nanoseconds();
    size_t num_calls = 0;
    while (nanoseconds() - prev_time < seconds * 1e9)
        ++num_calls;

    std::cerr << "num_calls: " << num_calls << "\n";
}

}


TEST(AsynchronousUnwinding, Test)
{
    using namespace DB;

    {
        ReadBufferFromFile in("/proc/self/maps");
        WriteBufferFromFileDescriptor out(STDERR_FILENO);
        copyData(in, out);
    }

    std::cerr << "OS version is " << Poco::Environment::osVersion() << "\n";
    loop(1000);
    std::cerr << counter << "\n";
}
