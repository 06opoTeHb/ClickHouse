# Broken in macos. TODO: update clang, re-test, enable
if (NOT APPLE)
    option (ENABLE_EMBEDDED_COMPILER "Set to TRUE to enable support for 'compile_expressions' option for query execution" ${ENABLE_LIBRARIES})
    option (USE_INTERNAL_LLVM_LIBRARY "Use bundled LLVM library." ${NOT_UNBUNDLED})
endif ()

if (ENABLE_EMBEDDED_COMPILER)
    if (USE_INTERNAL_LLVM_LIBRARY AND NOT EXISTS "${ClickHouse_SOURCE_DIR}/contrib/llvm/llvm/CMakeLists.txt")
        message (WARNING "submodule contrib/llvm is missing. to fix try run: \n git submodule update --init --recursive")
        set (USE_INTERNAL_LLVM_LIBRARY 0)
    endif ()

    if (NOT USE_INTERNAL_LLVM_LIBRARY)
        set (LLVM_FOUND 0)
        set (USE_EMBEDDED_COMPILER 0)
    else()
        if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)
            message(WARNING "Option ENABLE_EMBEDDED_COMPILER is set but LLVM library cannot build if build directory is the same as source directory.")
            set (LLVM_FOUND 0)
            set (USE_EMBEDDED_COMPILER 0)
        elseif (SPLIT_SHARED_LIBRARIES)
            # llvm-tablegen cannot find shared libraries that we build. Probably can be easily fixed.
            message(WARNING "Option ENABLE_EMBEDDED_COMPILER is not compatible with SPLIT_SHARED_LIBRARIES. Build of LLVM will be disabled.")
            set (LLVM_FOUND 0)
            set (USE_EMBEDDED_COMPILER 0)
        elseif (NOT ARCH_AMD64)
            # It's not supported yet, but you can help.
            message(WARNING "Option ENABLE_EMBEDDED_COMPILER is only available for x86_64. Build of LLVM will be disabled.")
            set (LLVM_FOUND 0)
            set (USE_EMBEDDED_COMPILER 0)
        elseif (SANITIZE STREQUAL "undefined")
            # llvm-tblgen, that is used during LLVM build, doesn't work with UBSan.
            message(WARNING "Option ENABLE_EMBEDDED_COMPILER does not work with UBSan, because 'llvm-tblgen' tool from LLVM has undefined behaviour. Build of LLVM will be disabled.")
            set (LLVM_FOUND 0)
            set (USE_EMBEDDED_COMPILER 0)
        else ()
            set (LLVM_FOUND 1)
            set (USE_EMBEDDED_COMPILER 1)
            set (LLVM_VERSION "9.0.0bundled")
            set (LLVM_INCLUDE_DIRS
                ${ClickHouse_SOURCE_DIR}/contrib/llvm/llvm/include
                ${ClickHouse_BINARY_DIR}/contrib/llvm/llvm/include
            )
            set (LLVM_LIBRARY_DIRS ${ClickHouse_BINARY_DIR}/contrib/llvm/llvm)
        endif()
    endif()

    if (LLVM_FOUND)
        message(STATUS "LLVM include Directory: ${LLVM_INCLUDE_DIRS}")
        message(STATUS "LLVM library Directory: ${LLVM_LIBRARY_DIRS}")
        message(STATUS "LLVM C++ compiler flags: ${LLVM_CXXFLAGS}")
    endif()
endif()


# This list was generated by listing all LLVM libraries, compiling the binary and removing all libraries while it still compiles.
set (REQUIRED_LLVM_LIBRARIES
LLVMOrcJIT
LLVMExecutionEngine
LLVMRuntimeDyld
LLVMX86CodeGen
LLVMX86Desc
LLVMX86Info
LLVMX86Utils
LLVMAsmPrinter
LLVMDebugInfoDWARF
LLVMGlobalISel
LLVMSelectionDAG
LLVMMCDisassembler
LLVMPasses
LLVMCodeGen
LLVMipo
LLVMBitWriter
LLVMInstrumentation
LLVMScalarOpts
LLVMAggressiveInstCombine
LLVMInstCombine
LLVMVectorize
LLVMTransformUtils
LLVMTarget
LLVMAnalysis
LLVMProfileData
LLVMObject
LLVMBitReader
LLVMCore
LLVMRemarks
LLVMBitstreamReader
LLVMMCParser
LLVMMC
LLVMBinaryFormat
LLVMDebugInfoCodeView
LLVMSupport
LLVMDemangle
)
